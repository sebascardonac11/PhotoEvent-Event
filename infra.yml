AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ## EVENT ##
  LambdaFuncEventName:
    Type: String
    Default: photoEvent-lambda-event    
  ApiPathNameEvent:
    Type: String
    Default: photoEvent-events
Resources:
################## EVENT ##################
  LambdaFunctionEvent:
    Type: 'AWS::Lambda::Function'
    Properties:
      Timeout: 10
      Code:
        ZipFile: |
          console.log('Loading DynamoDB Lambda function');
      FunctionName:
        Ref: LambdaFuncEventName
      Handler: index.handler
      Runtime: nodejs16.x
      Role: 
        Fn::ImportValue: PhotoEvent-IAMRoleName
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9dec56b7-939f-4bc7-9200-47da6127bfe1
  APIGwResorceEvent:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: 
        Fn::ImportValue: PhotoEvent-ApiGwRestApiID
      ParentId: 
        Fn::ImportValue: PhotoEvent-ApiGwRestApiResource
      PathPart:
        Ref: ApiPathNameEvent
  ApiGwEventAny:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: 
        Fn::ImportValue: PhotoEvent-ApiGwRestApiID
      ResourceId: !Ref APIGwResorceEvent
      HttpMethod: ANY
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: 
        Fn::ImportValue: PhotoEvent-APIGwAuthorizer
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaFunctionEvent.Arn
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true    
    DependsOn:
      - APIGwResorceEvent
      - LambdaFunctionEvent
  ApiGwEventGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref APIGwResorceEvent
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: 
        Fn::ImportValue:  PhotoEvent-APIGwAuthorizer
      RestApiId:  
        Fn::ImportValue: PhotoEvent-ApiGwRestApiID
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.json('$')          
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncEventNameArn}/invocations
          - LambdaFuncEventNameArn: !GetAtt LambdaFunctionEvent.Arn
        RequestTemplates:
          application/json: $input.json('$')
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
    DependsOn:
      - APIGwResorceEvent
      - LambdaFunctionEvent
  ApiGwEventOpt:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref APIGwResorceEvent
      HttpMethod: OPTIONS
      AuthorizationType: NONE      
      RestApiId: 
        Fn::ImportValue: PhotoEvent-ApiGwRestApiID
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
    DependsOn:
      - APIGwResorceEvent
      - LambdaFunctionEvent
  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description : 'Deploy Events'
      RestApiId: 
        Fn::ImportValue: PhotoEvent-ApiGwRestApiID
      StageName:
        Fn::ImportValue: PhotoEvent-Enviroment
    DependsOn:
      - ApiGwEventAny
      - ApiGwEventGet
  APIGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaFunctionEvent.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment
